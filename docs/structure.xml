<?xml version="1.0" encoding="utf-8"?>
<project title="Enumerations for php" version="2.1.0&#10;">
  <partials/>
  <file path="Enumeration.php" generated-path="Enumeration.html" hash="a102ea413321e15be5c1b4de32ceb4dd" package="Default">
    <docblock line="0">
      <description>Enumerations</description>
      <long-description>Licensed under the BSD (3-Clause) license
For full copyright and license information, please see the LICENSE file</long-description>
      <tag name="copyright" line="0" description="2012-2013 Robert Rossmann"/>
      <tag name="author" line="0" description="Robert Rossmann" link="mailto:rr.rossmann@me.com"/>
      <tag name="link" line="0" description="https://github.com/Alaneor/Enumeration" link="https://github.com/Alaneor/Enumeration"/>
      <tag name="license" line="0" description="BSD (3-Clause) License" link="http://choosealicense.com/licenses/bsd-3-clause"/>
    </docblock>
    <class final="false" abstract="false" namespace="Enumeration" line="26" package="Enumeration">
      <extends/>
      <name>Enumeration</name>
      <full_name>\Enumeration\Enumeration</full_name>
      <docblock line="26">
        <description>The Enumeration class</description>
        <long-description>All enumerations should extend this class. Enumerated members
should be defined and class constants.</long-description>
        <tag name="package" line="26" description="Enumeration"/>
      </docblock>
      <method final="true" abstract="false" static="false" visibility="public" namespace="Enumeration" line="34" package="Enumeration">
        <name>__construct</name>
        <full_name>\Enumeration\Enumeration::__construct()</full_name>
        <docblock line="34">
          <description>Instances are not allowed</description>
          <long-description></long-description>
          <tag name="throws" line="34" description="" type="\Exception">
            <type link="Exception.html">\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Enumeration" line="66" package="Enumeration">
        <name>getName</name>
        <full_name>\Enumeration\Enumeration::getName()</full_name>
        <docblock line="66">
          <description>Get the name of the member that holds given value</description>
          <long-description>&lt;p class="alert"&gt;This method is type-sensitive - see the example below.&lt;/p&gt;
&lt;h3&gt;Use case&lt;/h3&gt;
You have a value that is defined in an enumeration and you would like
to know the name of the enumeration member that holds this value.

&lt;h3&gt;Example&lt;/h3&gt;
&lt;code&gt;
class Animal extends Enumeration\Enumeration
{
  const Horse = 0;
  const Dog = 1;
}

echo Animal::getName( 0 ); // Prints 'Horse'
echo Animal::getName( '0' ); // Returns null, method is type-sensitive
&lt;/code&gt;</long-description>
          <tag name="param" line="66" description="&lt;p&gt;The member's expected value. &lt;b&gt;The&#10;                                  value must be of the same type as defined&#10;                                  in the Enumeration.&lt;/b&gt;&lt;/p&gt;&#10;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="66" description="The name of the member that holds this value, null&#10;                       if no such member exists" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Enumeration" line="96" package="Enumeration">
        <name>getValue</name>
        <full_name>\Enumeration\Enumeration::getValue()</full_name>
        <docblock line="96">
          <description>Get the value of a given member's name</description>
          <long-description>&lt;h3&gt;Use case&lt;/h3&gt;
You have a string representation of the Enumeration member and you would
like to know the value that member holds.

&lt;h3&gt;Example&lt;/h3&gt;
&lt;code&gt;
class Animal extends Enumeration\Enumeration
{
  const Horse = 0;
  const Dog = 1;
}

echo Animal::getValue( 'Dog' ); // Prints an integer, 1
&lt;/code&gt;</long-description>
          <tag name="param" line="96" description="&lt;p&gt;The member's expected name&lt;/p&gt;&#10;" type="string" variable="$member">
            <type>string</type>
          </tag>
          <tag name="return" line="96" description="The value of the member, null&#10;                       if no such member exists" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0">
          <name>$member</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Enumeration" line="120" package="Enumeration">
        <name>isDefined</name>
        <full_name>\Enumeration\Enumeration::isDefined()</full_name>
        <docblock line="120">
          <description>Does a member with this name exist in the enumeration?</description>
          <long-description>&lt;h3&gt;Example&lt;/h3&gt;
&lt;code&gt;
class Animal extends Enumeration\Enumeration
{
  const Horse = 0;
  const Dog = 1;
}

echo Animal::isDefined( 'Dog' ); // Prints an integer, 1 (bool true)
echo Animal::isDefined( 'Cat' ); // Prints nothing (bool false)
&lt;/code&gt;</long-description>
          <tag name="param" line="120" description="&lt;p&gt;The member's expected name&lt;/p&gt;&#10;" type="string" variable="$member">
            <type>string</type>
          </tag>
          <tag name="return" line="120" description="&lt;b&gt;true&lt;/b&gt; if such member is defined, &lt;b&gt;false&lt;/b&gt; otherwise" type="bool">
            <type>bool</type>
          </tag>
        </docblock>
        <argument line="0">
          <name>$member</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Enumeration" line="149" package="Enumeration">
        <name>allMembers</name>
        <full_name>\Enumeration\Enumeration::allMembers()</full_name>
        <docblock line="149">
          <description>Get all members defined in this Enumeration</description>
          <long-description>&lt;p class="alert"&gt;The returned array's order is determined by the order
in which the constants are defined in the class.&lt;/p&gt;

&lt;h3&gt;Example&lt;/h3&gt;
&lt;code&gt;
class Animal extends Enumeration\Enumeration
{
  const Horse = 0;
  const Dog = 1;
}

print_r( Animal::allMembers() );
// Array
// (
//   0 =&gt; 'Horse'
//   1 =&gt; 'Dog'
// )
&lt;/code&gt;</long-description>
          <tag name="return" line="149" description="An ordered list of all Enumeration members" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Enumeration" line="175" package="Enumeration">
        <name>toArray</name>
        <full_name>\Enumeration\Enumeration::toArray()</full_name>
        <docblock line="175">
          <description>Convert the Enumeration into an array</description>
          <long-description>&lt;h3&gt;Example&lt;/h3&gt;
&lt;code&gt;
class Animal extends Enumeration\Enumeration
{
  const Horse = 0;
  const Dog = 1;
}

print_r( Animal::allMembers() );
// Array
// (
//   'Horse' =&gt; 0
//   'Dog' =&gt; 1
// )
&lt;/code&gt;</long-description>
          <tag name="return" line="175" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Enumeration" line="197" package="Enumeration">
        <name>getType</name>
        <full_name>\Enumeration\Enumeration::getType()</full_name>
        <docblock line="197">
          <description>Get the string representation of the Enumeration, without namespace</description>
          <long-description>&lt;h3&gt;Example&lt;/h3&gt;
&lt;code&gt;
namespace Fauna;

class Animal extends Enumeration\Enumeration {}

echo Animal::getType(); // Animal
echo Enumeration\Enumeration::getType(); // Enumeration
&lt;/code&gt;</long-description>
          <tag name="return" line="197" description="The name of the Enumeration class, without namespace" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <source>eJzdWN9v20YMfvdfQQQFohR2nDRviZ02S9KtQFsMSTZgWAbjLNOWEOlOuDvVCYL+7+PxTr/s2m4eNqzTgy2fSB758SOP8uhtkRS93vD16x68hmtZ5qiFTZU09NstfUxjlAZnUMoZarAJwk+3VxCdDC4zURo8gMxLOOH3SsO8zDKIVfGk00ViQchZJQGpnCuds/k+FBkKWjOIbPTjh8vrz7fXME8zDFu/a6wAvDk6fjOgjxO4UVPUlr6MyYWULClKm9DefK08h5HWhzr8eJfjYazyc1bKUvkA4UqsLczpcLhIbVJOnczwIhMSlR62QAlqPppKjbTiRCmDIjxh7XBvhlMzG5wMYgaLNFbA+1iDN+z1elLkaAoRYzsTZ3V67pLOAyCjpsrTBaGOrfSBSVSZzQAfLVIKbJIaL39Ym6Ck5pgTWM5GJT9FmOE8lfTQpY5VKJ3SWCGtOaxSQ04+iIUHoQvQsOd12qvPvR4ABwGk/IGNxWhAaASpiCRZppY448de5p1NtFoagPvrxxgLbxucdSCKSJFBUU4JY6KbjBmMyYS91GVsowOSenbywGZA4rJlKIK9P1QJMfGB9k59aCnhQRG33d6DgzMy8rXj/M9oma8uVaDmfO9RpFthIVHZzMAi/YISvoisxFZQo8LjOd4TGVF07/zOZSVH4u4M6M4+FTgwxIfUkj4M6uLAR5FTvVByCKfD0bA4DwaTk/PfiFYxVdJoSD/8sosuEWRBeBe8Z7RBldlUulBbdOFcP5HakkmQpQ/eb7AKHiQhuBpyW3c9fGYbb33YDp8cvPaRtJwdxWqG4d4z50KmOSXYM7dDpPsO1ZzGs/8CT1H4RWmCYwxHZ931K7Wg1eOw+rXlFFLthh1PTxdoP1OQERxR6mE4hF91SqyHfba7v01j/2g/6NygLTUVoKRG2N+Y3RD8sIk+EL8QWuRcV0TmVC58f3rlE+muu5px+4ZAKjB2lezRhtGUSIVV8LsubzQvCaFpnVrj0uycBVEz5nsNErFst0kRW6ed+DTDsxrf3c6SajjVZ2i3upTOqa+AKeOksoSPqbGm7iGhe1Dp23YTqdMZ8G4ayasHfCIKCa3F04R6vY6TSqofzJyeWnXhnkcHfaBGhI4QjhG3LA6lceG6qGNLvMwp06khIrP9Cha/z3gMc5ERld9yrHDK65u7kfeWsBOh9dQEcaCu1OD2jhGyorHQSGy1vsZDWq7Xy77TObw11z46naPVhYIW5/SHaw6/uzio1kljv9shqJ3SNy5Q9+H4pbUdMKnqYL24V5LYqqE8faTnTQ3VRGiK6J8tlwBJFUNTMMHHqjRSc+VbSUuW2L1WOX+Gp38R553f65y/Um5yqBxd0sDmewO3D/a7akOtQ+rtD0W1Fli7uAbRVKmM283BDkuXwq5YovkncTT0NrjjHPyL5OVdw0UHl4vBnRaOjm0uNoNL34mxmyxH3qNepgZ38fRb5Fslqu/s1GUnnvu16Dfa+6bBkObYaqRuz1pMz1XKbBwJMXjkJnC3HWGp9KzCwaLO2e70iTnOj7wt2mmZpHHC6/XIzkN2xxkMLwL1HPkfLovCEXWio5rQBPEnj3CVBpIiRnNm6l9RfQc0y43PuxMcLx/zsquuenEz9xvOckqYsRfSg49uXqYg3OlL+V8/Ine20XZMG2lJhPwuHl4q+cW9/64e14Sjcq1D1ED9v9MeMu6yfNRe5n5Ki8cvT/uuPNZ5aaZGdwRdMn5j/xZ6g/MMWZyXI3eGTmIKD2cTBtrH16ZAY2RwTtKXVWVHW15Pv3eK6/MBqkoL9X8PL+JG84/Fe1FKcdZSfglt4Hnb2HVHLyORP7j8aktsg8FVvTWKbs32tjeTtT9gNkG4fW7yvjVE4Reu8TfY0OUCgRi5ozUj5yPYu7/f6wfduhl87f0NRYvjxQ==</source>
  </file>
  <package name="Default" full_name="Default"/>
  <package name="Enumeration" full_name="Enumeration"/>
  <namespace name="Enumeration" full_name="Enumeration"/>
  <deprecated count="0"/>
</project>
